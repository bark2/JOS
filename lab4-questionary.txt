=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a singleline.

=== Q Compare kern/mpentry.S side by side with boot/boot.S. Bearing in
===   mind that kern/mpentry.S is compiled and linked to run above KERNBASE
===   just like everything else in the kernel, what is the purpose of macro
===   MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in
===   boot/boot.S? In other words, what could go wrong if it were
===   omitted in kern/mpentry.S?
===   (free form)
Because of the memory copy of the executable, the linked address of the kernel elf is not the same
as the physical memory it will be run on. Thus, all addresses will be wrong
as calculated by the linker. This macro fixes it by relying on the physical linked
real address to calculated addresses for direct jumps.
Otherwide, the linker will fill wrong absolute addresses(it already is) to all direct jumps
and .data variables addresses. gdtsec address and the first jump will be wrong and will jump to old
kernel entry.S code.

=== Q It seems that using the big kernel lock guarantees that only one
===   CPU can run the kernel code at a time. Why do we still need
===   separate kernel stacks for each CPU? Describe a scenario in
===   which using a shared kernel stack will go wrong, even with the
===   protection of the big kernel lock.
===   (free form)
Kernel stacks keep track of local variables for kernel functions.
If one env yielded the cpu during a trap, another cpu returning
to work inside the same kernel code could see the wrong trapframe
for example and mix up two different envs.
    
=== Q Whenever the kernel switches from one environment to another, it
===   must ensure the old environment's registers are saved so they
===   can be restored properly later. Where does this happen?
===   (JOS function name)
Trap 

=== Q In your implementation of env_run() you should have called
===   lcr3(). Before and after the call to lcr3(), your code makes
===   references (at least it should) to the variable e, the argument
===   to env_run. Upon loading the %cr3 register, the addressing
===   context used by the MMU is instantly changed. But a virtual
===   address (namely e) has meaning relative to a given address 
===   context--the address context specifies the physical address to
===   which the virtual address maps. Why can the pointer e be
===   dereferenced both before and after the addressing switch?
===   (one sentence, free form)
e is a local variable saved on the kernel stack, which is static across different envs.

=== Q In Ex. 9, what happens if the user environment runs out of
===   space on the exception stack?
===   (one setence, free form)
The user envierment will have a pagefault running out of UXSTACKTOP

=== Q In dumpfork.c, the first time you call duppage(), the function
===   allocates a page in one environment (env A) and then maps it in
===   another (env B). At what address is the page mapped in env A, and
===   at what address is it mapped in env B?
===   (ADDR(in env A):ADDR(in env B) (example: 0xAAAAAAAA:0xBBBBBBBB)
0x800000:0x400000

====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
6

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
lib/lib.h
lib/libmain.c
user/dumbfork.c
kern/fork.c

=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
The challenge required a new user mode routine,
which sets up a child env with the same mapping as the parent but the exception
and user stack. We used sys_page_map to copy all mappings to the new envieremtn page directory,
duppage to copy the user stack, and sys_page_alloc for the exception stack.
As for the "thisenv problem" we added the line #define thisenv &envs[ENVX(sys_getenvid)],
in order to get the right env variable each time it is referenced.
We had to wrap existing references to it with #ifndef SFORK (which we #define'd in lib//lib.h) as that broke existing code.
We are aware that it is a specific solution and not a general one.
We tried to implement an approach that would update thisenv at the end of each call to env_run, but were unsuccessful in doing so.
One attempt was to find the address of thisenv via STABS data, but it is not possible(as we have found out...)
as global variable addresses are not stored there.
Another attempt we would've liked to try, was hooking the return from trap,
to run a short hook in user mode that updates thisenv before returning to the regular flow, but did not do so due to time constraints.
